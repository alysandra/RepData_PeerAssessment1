new_activity <- activity
new_activity$steps <- fillNA
StepsTotal2 <- aggregate(steps ~ date, data = new_activity, sum, na.rm = TRUE)
hist(StepsTotal2$steps, main = "Total steps by day", xlab = "day", col = "pink")
##New Mean and median
mean(StepsTotal2$steps)
##[1] 10766.19
median(StepsTotal2$steps)
##[1] 10766.19
## Part 5: Are there differences in activity patterns between weekdays and weekends?
##Weekday versus weekend walking: differentiate between the two first:
day <- weekdays(activity$date)
daylevel <- vector()
for (i in 1:nrow(activity)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
##Compare the two types
activity$daylevel <- daylevel
activity$daylevel <- factor(activity$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = activity, mean)
names(stepsByDay) <- c("interval", "daylevel", "steps")
##Create the plot:
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
knit2html()
knit2html()
package (knitr)
install.packages(knitr)
library("knitr", lib.loc="~/R/win-library/3.1")
knit2html()
knit2html()
knit2html()
```{recho=FALSE, results='hide', warning=FALSE, message=FALSE}
## Part 1: Loading and preprocessing the data
activity <- read.csv("~/mm/activity.csv",  colClasses = c("numeric", "character",
"numeric"))
library(lattice)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
## Part 2: What is mean total number of steps taken per day?
StepsTotal <- aggregate(steps ~ date, data = activity, sum, na.rm = TRUE)
hist(StepsTotal$steps, main = "Total Steps By Day", xlab = "Days", col = "blue")
mean(StepsTotal$steps)
##Mean: [1] 10766.19
median(StepsTotal$steps)
##Median: [1] 10765
##Part 3: What is the average daily activity pattern?
##Use time series plot to check 5 minute intervals
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
##And plot:
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval",
ylab = "Average across all Days", main = "Average number of steps taken",
col = "black")
## to find max number of steps on average in a 5 min interval
max_interval <- which.max(time_series)
names(max_interval)
##Part 4: Imputing missing values
## Find the number of missing values:
activity_NA <- sum(is.na(activity))
activity_NA
##Replace the NA value with avg 5 min intervals
StepsAverage <- aggregate(steps ~ interval, data = activity, FUN = mean)
fillNA <- numeric()
for (i in 1:nrow(activity)) {
obs <- activity[i, ]
if (is.na(obs$steps)) {
steps <- subset(StepsAverage, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
##Create a new datasset, then aggregate the steps and make a new histogram.
new_activity <- activity
new_activity$steps <- fillNA
StepsTotal2 <- aggregate(steps ~ date, data = new_activity, sum, na.rm = TRUE)
hist(StepsTotal2$steps, main = "Total steps by day", xlab = "day", col = "pink")
##New Mean and median
mean(StepsTotal2$steps)
##[1] 10766.19
median(StepsTotal2$steps)
##[1] 10766.19
## Part 5: Are there differences in activity patterns between weekdays and weekends?
##Weekday versus weekend walking: differentiate between the two first:
day <- weekdays(activity$date)
daylevel <- vector()
for (i in 1:nrow(activity)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
##Compare the two types
activity$daylevel <- daylevel
activity$daylevel <- factor(activity$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = activity, mean)
names(stepsByDay) <- c("interval", "daylevel", "steps")
##Create the plot:
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
```
knit2html()
## Part 1: Loading and preprocessing the data
```{r}
activity <- read.csv("~/mm/activity.csv",  colClasses = c("numeric", "character",
"numeric"))
library(lattice)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
```
## Part 2: What is mean total number of steps taken per day?
```{r}
StepsTotal <- aggregate(steps ~ date, data = activity, sum, na.rm = TRUE)
hist(StepsTotal$steps, main = "Total Steps By Day", xlab = "Days", col = "blue")
mean(StepsTotal$steps)
##Mean: [1] 10766.19
median(StepsTotal$steps)
##Median: [1] 10765
```
##Part 3: What is the average daily activity pattern?
##Use time series plot to check 5 minute intervals
```{r}
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
##And plot:
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval",
ylab = "Average across all Days", main = "Average number of steps taken",
col = "black")
## to find max number of steps on average in a 5 min interval
max_interval <- which.max(time_series)
names(max_interval)
```
##Part 4: Imputing missing values
## Find the number of missing values:
```{r}
activity_NA <- sum(is.na(activity))
activity_NA
##Replace the NA value with avg 5 min intervals
StepsAverage <- aggregate(steps ~ interval, data = activity, FUN = mean)
fillNA <- numeric()
for (i in 1:nrow(activity)) {
obs <- activity[i, ]
if (is.na(obs$steps)) {
steps <- subset(StepsAverage, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
##Create a new datasset, then aggregate the steps and make a new histogram.
new_activity <- activity
new_activity$steps <- fillNA
StepsTotal2 <- aggregate(steps ~ date, data = new_activity, sum, na.rm = TRUE)
hist(StepsTotal2$steps, main = "Total steps by day", xlab = "day", col = "pink")
##New Mean and median
mean(StepsTotal2$steps)
##[1] 10766.19
median(StepsTotal2$steps)
##[1] 10766.19
```
## Part 5: Are there differences in activity patterns between weekdays and weekends?
##Weekday versus weekend walking: differentiate between the two first:
```{r}
day <- weekdays(activity$date)
daylevel <- vector()
for (i in 1:nrow(activity)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
##Compare the two types
activity$daylevel <- daylevel
activity$daylevel <- factor(activity$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = activity, mean)
names(stepsByDay) <- c("interval", "daylevel", "steps")
```
##Create the plot:
```{r}
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
```
```{recho=FALSE, results='hide', warning=FALSE, message=FALSE}
title: "PA1_template.Rmd"
output: html_document
```
## Part 1: Loading and preprocessing the data
```{r}
activity <- read.csv("~/mm/activity.csv",  colClasses = c("numeric", "character",
"numeric"))
library(lattice)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
```
## Part 2: What is mean total number of steps taken per day?
```{r}
StepsTotal <- aggregate(steps ~ date, data = activity, sum, na.rm = TRUE)
hist(StepsTotal$steps, main = "Total Steps By Day", xlab = "Days", col = "blue")
mean(StepsTotal$steps)
##Mean: [1] 10766.19
median(StepsTotal$steps)
##Median: [1] 10765
```
##Part 3: What is the average daily activity pattern?
##Use time series plot to check 5 minute intervals
```{r}
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
##And plot:
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval",
ylab = "Average across all Days", main = "Average number of steps taken",
col = "black")
## to find max number of steps on average in a 5 min interval
max_interval <- which.max(time_series)
names(max_interval)
```
##Part 4: Imputing missing values
## Find the number of missing values:
```{r}
activity_NA <- sum(is.na(activity))
activity_NA
##Replace the NA value with avg 5 min intervals
StepsAverage <- aggregate(steps ~ interval, data = activity, FUN = mean)
fillNA <- numeric()
for (i in 1:nrow(activity)) {
obs <- activity[i, ]
if (is.na(obs$steps)) {
steps <- subset(StepsAverage, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
##Create a new datasset, then aggregate the steps and make a new histogram.
new_activity <- activity
new_activity$steps <- fillNA
StepsTotal2 <- aggregate(steps ~ date, data = new_activity, sum, na.rm = TRUE)
hist(StepsTotal2$steps, main = "Total steps by day", xlab = "day", col = "pink")
##New Mean and median
mean(StepsTotal2$steps)
##[1] 10766.19
median(StepsTotal2$steps)
##[1] 10766.19
```
## Part 5: Are there differences in activity patterns between weekdays and weekends?
##Weekday versus weekend walking: differentiate between the two first:
```{r}
day <- weekdays(activity$date)
daylevel <- vector()
for (i in 1:nrow(activity)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
##Compare the two types
activity$daylevel <- daylevel
activity$daylevel <- factor(activity$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = activity, mean)
names(stepsByDay) <- c("interval", "daylevel", "steps")
```
##Create the plot:
```{r}
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
```
install.packages(evaluate)
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
##### 1. Load the data (i.e. read.csv())
```{r, results='markup', warning=TRUE, message=TRUE}
activityData <-  read.csv("~/mm/activity.csv",  colClasses = c("numeric", "character",
"numeric"))
```
##### 2. Process/transform the data (if necessary) into a format suitable for your analysis
```{r}
#activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
```
-----
## What is mean total number of steps taken per day?
```{r}
stepsByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
```
##### 1. Make a histogram of the total number of steps taken each day
```{r}
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
```
##### 2. Calculate and report the mean and median total number of steps taken per day
```{r}
stepsByDayMean <- mean(stepsByDay)
stepsByDayMedian <- median(stepsByDay)
```
* Mean: `r stepsByDayMean`
* Median:  `r stepsByDayMedian`
-----
## What is the average daily activity pattern?
```{r}
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
```
##### 1. Make a time series plot
```{r}
ggplot(data=averageStepsPerTimeBlock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
```
##### 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
```
* Most Steps at: `r timeMostSteps`
----
## Imputing missing values
##### 1. Calculate and report the total number of missing values in the dataset
```{r}
numMissingValues <- length(which(is.na(activityData$steps)))
```
* Number of missing values: `r numMissingValues`
##### 2. Devise a strategy for filling in all of the missing values in the dataset.
##### 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
```
##### 4. Make a histogram of the total number of steps taken each day
```{r}
stepsByDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
qplot(stepsByDayImputed, xlab='Total steps per day (Imputed)', ylab='Frequency using binwith 500', binwidth=500)
```
##### ... and Calculate and report the mean and median total number of steps taken per day.
```{r}
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
```
* Mean (Imputed): `r stepsByDayMeanImputed`
* Median (Imputed):  `r stepsByDayMedianImputed`
----
## Are there differences in activity patterns between weekdays and weekends?
##### 1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
```{r}
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
```
##### 2. Make a panel plot containing a time series plot
```{r}
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
```
packages <- c("plyr", "lattice", "data.table", "httr", "ggplot2")
ipak(packages)
package(plyr)
packages(plyr)
library("plyr", lib.loc="~/R/win-library/3.1")
library(plyr)
library(lattice)
library("data.table", "plyr")
library(data.table)
library(httr)
library(ggplot2)
dir <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
datos <- "datos"
```{r}
activity <- read.csv("~/mm/activity.csv",  colClasses = c("numeric", "character",
"numeric"))
library(plyr)
library(lattice)
library(data.table)
library(httr)
library(ggplot2)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
```
library(knitr)
data <- read.csv("~/mm/activity.csv",  colClasses = c("numeric", "character",
"numeric"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
library(ggplot2)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
```
```{r}
data <- read.csv("~/mm/activity.csv",  colClasses = c("numeric", "character",
"numeric"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
library(ggplot2)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
```
```{r}
data <- read.csv("~/mm/activity.csv",  colClasses = c("numeric", "character",
"numeric"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
library(ggplot2)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
```
```{r}
data <- read.csv("~/mm/activity.csv",  colClasses = c("numeric", "character",
"numeric"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
library(ggplot2)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
```
View(data)
```{recho=T}
title: "PA1_template.Rmd"
output: html_document
echo = TRUE
options(scipen = 1)
data <- read.csv("~/mm/activity.csv",  colClasses = c("numeric", "character",
"numeric"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
head(noNA)
dim(noNA)
library(ggplot2)
activity$date <- as.Date(activity$date, "%Y-%m-%d")
StepsTotal <- aggregate(steps ~ date, data = activity, sum, na.rm = TRUE)
hist(StepsTotal$steps, main = "Total Steps By Day", xlab = "Days", col = "blue")
mean(StepsTotal$steps)
##Mean: [1] 10766.19
median(StepsTotal$steps)
##Median: [1] 10765
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
##And plot:
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval",
ylab = "Average across all Days", main = "Average number of steps taken",
col = "black")
## to find max number of steps on average in a 5 min interval
max_interval <- which.max(time_series)
names(max_interval)
activity_NA <- sum(is.na(activity))
activity_NA
##Replace the NA value with avg 5 min intervals
StepsAverage <- aggregate(steps ~ interval, data = activity, FUN = mean)
fillNA <- numeric()
for (i in 1:nrow(activity)) {
obs <- activity[i, ]
if (is.na(obs$steps)) {
steps <- subset(StepsAverage, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
##Create a new datasset, then aggregate the steps and make a new histogram.
new_activity <- activity
new_activity$steps <- fillNA
StepsTotal2 <- aggregate(steps ~ date, data = new_activity, sum, na.rm = TRUE)
hist(StepsTotal2$steps, main = "Total steps by day", xlab = "day", col = "pink")
##New Mean and median
mean(StepsTotal2$steps)
##[1] 10766.19
median(StepsTotal2$steps)
##[1] 10766.19
day <- weekdays(activity$date)
daylevel <- vector()
for (i in 1:nrow(activity)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
##Compare the two types
activity$daylevel <- daylevel
activity$daylevel <- factor(activity$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = activity, mean)
names(stepsByDay) <- c("interval", "daylevel", "steps")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
source('~/.active-rstudio-document', echo=TRUE)
knit2html()
knit2html(PA1_template.rmd)
knit2html(PA1_template.Rmd)
```{r, echo=TRUE, message=F, warning=F}
title: "PA1_template.Rmd"
output: html_document
echo = TRUE
options(scipen = 1)
```
output: html_document
install.packages('evaluate', type = 'source')
